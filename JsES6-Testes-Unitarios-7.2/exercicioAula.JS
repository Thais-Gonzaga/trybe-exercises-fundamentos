// parte 1 - Throw e Try/Catch

// A palavra reservada throw serve para lançar uma exceção criada por você.
// O operador new serve para criar um objeto personalizado ou nativo do JavaScript.

// const sum = (value1, value2) => {
//     if (typeof value1 !== 'number' || typeof value2 !== 'number') {
//       throw new Error('Os valores devem ser numéricos');
//     }
//     return value1 + value2;
//   };
  
//   console.log(sum(2, '3'));
//   console.log(sum(2, 3));

// const verifyIsNumber = (value1, value2) => {
//     if (typeof value1 !== 'number' || typeof value2 !== 'number') {
//       throw new Error('Os valores devem ser numéricos');
//     }
//   };
  // Enquanto o try tenta executar o código com sucesso, o catch é chamado caso ocorra um erro.
// const sum = (value1, value2) => {
//   try {
//     verifyIsNumber(value1, value2);
//     return value1 + value2;
//   } catch (error) {
//     return error.message;
//     }
//   };
//   console.log(sum(2, '3'));
// ------------------------------------------------------------------------------------------------

// Objetos: Parte I - Adicionando novas chaves (keys)

// const customer = {
//   firstName: 'Roberto',
//   age: 22,
//   job: 'Teacher',
// };

// let newKey = 'lastName';
// const lastName = 'Ferreira';
// customer[newKey] = lastName;
// newKey = 'fullName';
// const fullName = `${customer.firstName} ${customer.lastName}`;
// customer[newKey] = fullName;
// console.log(customer);
// ----------------------------------------------------------------------------

// Objetos: Parte II - Object.keys

// const coolestTvShow = {
//   name: "BoJack Horseman",
//   genre: "adult animation",
//   createdBy: "Raphael Bob-Waksberg",
//   favoriteCharacter: "Princess Carolyn",
//   quote: "Princess Carolyn always lands on her feet.",
//   seasons: 6,
// };

// console.log(Object.keys(coolestTvShow)); 
//Object.keys é utilizado para listar as chaves de um objeto, retornando-as em um array.
// ----------------------------------------------------------------------------------------------

// Objetos: Parte III - Object.values

// const coolestTvShow = {
//   name: "BoJack Horseman",
//   genre: "adult animation",
//   createdBy: "Raphael Bob-Waksberg",
//   favoriteCharacter: "Princess Carolyn",
//   quote: "Princess Carolyn always lands on her feet.",
//   seasons: 6,
// };
// console.log(Object.values(coolestTvShow));
// O Object.values segue a mesma lógica que o Object.keys, a diferença está em que ele lista os valores de cada chave.

// const student = {
//   Html: 'Muito Bom',
//   Css: 'Bom',
//   JavaScript: 'Ótimo',
//   SoftSkill: 'Ótimo',
// };

// const listSkillsValuesWithValues = (student) => Object.values(student);
// console.log(listSkillsValuesWithValues(student));
//---------------------------------------------------------------------------------------------

//Objetos: Parte IV - Object.entries

//Object.entries retorna um array cujos elementos são também arrays para cada conjunto chave e valor do objeto
// const coolestTvShow = {
//   name: "BoJack Horseman",
//   genre: "adult animation",
//   createdBy: "Raphael Bob-Waksberg",
//   favoriteCharacter: "Princess Carolyn",
//   quote: "Princess Carolyn always lands on her feet.",
//   seasons: 6,
// };

// console.log(Object.entries(coolestTvShow));
// ------------------------------------------------------------------------------------------------

// Objetos: Parte V - Object.assign
//Esse método é utilizado para copiar os valores de todas as propriedades de um ou mais objetos para um objeto destino

// A função recebe um número qualquer de parâmetros. Todos são agregados como valores para adicionar ao objeto de destino!
// const person = {
//   name: 'Alberto',
//   lastName: 'Gomes',
//   age: 20,
// };

// const info = {
//   age: 23,
//   job: 'engenheiro',
// };

// const family = {
//   children: ['Maria', 'João'],
//   wife: 'Ana',
// };

// Object.assign(person, info, family) // primeiro sempre o destino
// console.log(person) //23 sobrescreveu o 20

// const person = {
//   name: 'Roberto',
// };

// const lastName = {
//   lastName: 'Silva',
// };

// const clone = Object.assign(person, lastName);

// console.log(clone); // { name: 'Roberto', lastName: 'Silva' }
// console.log(person); // { name: 'Roberto', lastName: 'Silva' }

// clone.name = 'Maria';

// console.log('Mudando a propriedade name através do objeto clone')
// console.log(clone); // Output: { name: 'Maria', lastName: 'Silva' }
// console.log(person); // Output: { name: 'Maria', lastName: 'Silva' }
// console.log('--------------');

// person.lastName = 'Ferreira';

// console.log('Mudando a propriedade lastName através do objeto person');
// console.log(clone); // Output: { name: 'Maria', lastName: 'Ferreira' }
// console.log(person); // Output: { name: 'Maria', lastName: 'Ferreira' }


const person = {
  name:'Roberto',
};

const lastName = {
  lastName: 'Silva',
};

const newPerson = Object.assign({},person,lastName);
newPerson.name = 'Gilberto';
console.log(newPerson);
console.log(person);